/*
 * SeriesPropertiesDlg.java
 *
 * Created on 4. Mai 2006, 11:26
 */

package jamschartfactory.gui;

import jamschartfactory.plot.JFCChartPanel;
import org.jfree.chart.plot.*;
import org.jfree.chart.renderer.xy.*;

/**
 *
 * @author  c0krpe
 */
public class DiagramPropertiesDlg extends javax.swing.JDialog {
    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;
    
    private JFCChartPanel chartPanel;
    private CombinedDomainXYPlot cdp;
    private boolean subplots = false;
    
    /**
     * Creates new form SeriesPropertiesDlg
     */
    public DiagramPropertiesDlg(JFCChartPanel chartPanel) {
        this.chartPanel = chartPanel;
        this.setModal(false);
        initComponents();
        //determine plot type
        Plot thePlot = chartPanel.getChart().getPlot();
        if(thePlot.getClass() == CombinedDomainXYPlot.class){
            this.cdp = (CombinedDomainXYPlot)thePlot;
            int nSPlots = cdp.getSubplots().size();
            if(nSPlots == 1){
                this.jTabbedPane1.remove(2);
                subplots = false;
            }
            else{
                subplots = true;
                String[] plotIDs = new String[nSPlots];
                for(int i = 0; i < nSPlots; i++){
                    int count = i + 1;
                    plotIDs[i] = "Subplot " + count;
                }
                this.cob_subplotID.setModel(new javax.swing.DefaultComboBoxModel(plotIDs));
                this.tf_gapSize.setText("" + this.cdp.getGap());
            }
        }
        //retrieve sytem fonts
        java.awt.GraphicsEnvironment ge = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment();
        String[] fontNames = ge.getAvailableFontFamilyNames();
        String[] fontSizes = new String[] { "8", "9", "10", "11", "12", "14", "16",
        "18", "20", "22", "24", "26", "28", "36", "48", "72" };
        this.bgColorPanel.setBackground(chartPanel.getBackground());
        this.legendBgColor.setBackground((java.awt.Color)chartPanel.getChart().getLegend().getBackgroundPaint());
        //the axis panel
        this.axisTitle.setText(((XYPlot)chartPanel.getChart().getPlot()).getDomainAxis().getLabel());
        
        this.tf_axisMin.setText(""+((XYPlot)chartPanel.getChart().getPlot()).getDomainAxis().getLowerBound());
        this.tf_axisMax.setText(""+((XYPlot)chartPanel.getChart().getPlot()).getDomainAxis().getUpperBound());
        //this.tf_axisIntervall.setText(""+thePlot.getRangeAxis(seriesID).get)
        
        this.cob_labelFontFamily.setModel(new javax.swing.DefaultComboBoxModel(fontNames));
        this.cob_labelFontFamily.setSelectedItem(((XYPlot)chartPanel.getChart().getPlot()).getDomainAxis().getLabelFont().getFamily());
        this.tf_labelFontSize.setText(""+((XYPlot)chartPanel.getChart().getPlot()).getDomainAxis().getLabelFont().getSize());
        this.cob_labelFontStyle.setSelectedIndex(((XYPlot)chartPanel.getChart().getPlot()).getDomainAxis().getLabelFont().getStyle());
        
        this.cob_ticksFontFamily.setModel(new javax.swing.DefaultComboBoxModel(fontNames));
        this.cob_ticksFontFamily.setSelectedItem(((XYPlot)chartPanel.getChart().getPlot()).getDomainAxis().getTickLabelFont().getFamily());
        this.tf_ticksFontSize.setText(""+((XYPlot)chartPanel.getChart().getPlot()).getDomainAxis().getTickLabelFont().getSize());
        this.cob_ticksFontStyle.setSelectedIndex(((XYPlot)chartPanel.getChart().getPlot()).getDomainAxis().getTickLabelFont().getStyle());
        
        this.cob_legendFontFamily.setModel(new javax.swing.DefaultComboBoxModel(fontNames));
        this.cob_legendFontFamily.setSelectedItem(chartPanel.getChart().getLegend().getItemFont().getFamily());
        this.tf_legendFontSize.setText(""+chartPanel.getChart().getLegend().getItemFont().getSize());
        this.cob_legendFontStyle.setSelectedIndex(chartPanel.getChart().getLegend().getItemFont().getStyle());
        
        
    }
    
    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        setButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        lineSeriesPattern = new javax.swing.JPanel();
        bgColorPanel = new javax.swing.JPanel();
        chartBgColor = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lineType = new javax.swing.JTextField();
        legendBgColor = new javax.swing.JPanel();
        axesPattern = new javax.swing.JPanel();
        labelPanel = new javax.swing.JPanel();
        axisTitle = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        labelFontPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        tf_labelFontSize = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        cob_labelFontStyle = new javax.swing.JComboBox();
        cob_labelFontFamily = new javax.swing.JComboBox();
        tickPanel = new javax.swing.JPanel();
        cb_axisMin = new javax.swing.JCheckBox();
        cb_axisMax = new javax.swing.JCheckBox();
        cb_axisIntervall = new javax.swing.JCheckBox();
        tf_axisMin = new javax.swing.JTextField();
        tf_axisMax = new javax.swing.JTextField();
        tf_axisIntervall = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        cob_tickFontFamily = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        tf_ticksFontSize = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        cob_ticksFontStyle = new javax.swing.JComboBox();
        cob_ticksFontFamily = new javax.swing.JComboBox();
        cob_tickFontFamily1 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        tf_legendFontSize = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        cob_legendFontStyle = new javax.swing.JComboBox();
        cob_legendFontFamily = new javax.swing.JComboBox();
        labelPanel2 = new javax.swing.JPanel();
        tf_diagramTitle = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        cb_diagramTitle = new javax.swing.JCheckBox();
        subplotPanel = new javax.swing.JPanel();
        cob_subplotID = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        tf_weight = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        movePlotUp = new javax.swing.JButton();
        movePlotDown = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        tf_gapSize = new javax.swing.JTextField();

        setTitle("Diagram properties");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        setButton.setText("SET");
        setButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        mainPanel.setLayout(new java.awt.BorderLayout());

        mainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTabbedPane1.setFont(new java.awt.Font("Arial", 0, 11));
        lineSeriesPattern.setLayout(new java.awt.GridBagLayout());

        bgColorPanel.setLayout(new java.awt.GridBagLayout());

        bgColorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), "Colors", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11)));
        chartBgColor.setLayout(new java.awt.GridBagLayout());

        chartBgColor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        chartBgColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chartBgColorMouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);
        bgColorPanel.add(chartBgColor, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel1.setText("Legend background:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 5);
        bgColorPanel.add(jLabel1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel2.setText("Chart background:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 5);
        bgColorPanel.add(jLabel2, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel4.setText("Type:");
        jLabel4.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 5);
        bgColorPanel.add(jLabel4, gridBagConstraints);

        lineType.setFont(new java.awt.Font("Arial", 0, 11));
        lineType.setText("not impl. yet");
        lineType.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);
        bgColorPanel.add(lineType, gridBagConstraints);

        legendBgColor.setLayout(new java.awt.GridBagLayout());

        legendBgColor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        legendBgColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                legendBgColorMouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);
        bgColorPanel.add(legendBgColor, gridBagConstraints);

        lineSeriesPattern.add(bgColorPanel, new java.awt.GridBagConstraints());

        jTabbedPane1.addTab("Pattern", lineSeriesPattern);

        axesPattern.setLayout(new java.awt.GridBagLayout());

        labelPanel.setLayout(new java.awt.GridBagLayout());

        labelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), "Axis Label", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11), new java.awt.Color(0, 102, 255)));
        axisTitle.setText("jTextField1");
        axisTitle.setMaximumSize(new java.awt.Dimension(62, 19));
        axisTitle.setMinimumSize(new java.awt.Dimension(62, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 3);
        labelPanel.add(axisTitle, gridBagConstraints);

        jLabel8.setText("Title:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 0);
        labelPanel.add(jLabel8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        axesPattern.add(labelPanel, gridBagConstraints);

        labelFontPanel.setLayout(new java.awt.GridBagLayout());

        labelFontPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), "Axis Label Font", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11), new java.awt.Color(0, 102, 255)));
        jLabel11.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel11.setText("Family:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        labelFontPanel.add(jLabel11, gridBagConstraints);

        tf_labelFontSize.setFont(new java.awt.Font("Arial", 0, 11));
        tf_labelFontSize.setText("11");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 3);
        labelFontPanel.add(tf_labelFontSize, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel12.setText("Size:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        labelFontPanel.add(jLabel12, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel13.setText("Style:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        labelFontPanel.add(jLabel13, gridBagConstraints);

        cob_labelFontStyle.setFont(new java.awt.Font("Arial", 0, 11));
        cob_labelFontStyle.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Plain", "Bold", "Italic" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 3);
        labelFontPanel.add(cob_labelFontStyle, gridBagConstraints);

        cob_labelFontFamily.setFont(new java.awt.Font("Arial", 0, 11));
        cob_labelFontFamily.setMaximumSize(new java.awt.Dimension(35, 22));
        cob_labelFontFamily.setMinimumSize(new java.awt.Dimension(35, 22));
        cob_labelFontFamily.setPreferredSize(new java.awt.Dimension(35, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        labelFontPanel.add(cob_labelFontFamily, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        axesPattern.add(labelFontPanel, gridBagConstraints);

        tickPanel.setLayout(new java.awt.GridBagLayout());

        tickPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), "Tick Marks", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11), new java.awt.Color(0, 102, 255)));
        cb_axisMin.setFont(new java.awt.Font("Arial", 0, 11));
        cb_axisMin.setSelected(true);
        cb_axisMin.setText("minimum:");
        cb_axisMin.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cb_axisMin.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 3);
        tickPanel.add(cb_axisMin, gridBagConstraints);

        cb_axisMax.setFont(new java.awt.Font("Arial", 0, 11));
        cb_axisMax.setSelected(true);
        cb_axisMax.setText("maximum:");
        cb_axisMax.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cb_axisMax.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 3);
        tickPanel.add(cb_axisMax, gridBagConstraints);

        cb_axisIntervall.setFont(new java.awt.Font("Arial", 0, 11));
        cb_axisIntervall.setSelected(true);
        cb_axisIntervall.setText("intervall:");
        cb_axisIntervall.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cb_axisIntervall.setEnabled(false);
        cb_axisIntervall.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 3);
        tickPanel.add(cb_axisIntervall, gridBagConstraints);

        tf_axisMin.setFont(new java.awt.Font("Arial", 0, 11));
        tf_axisMin.setText("jTextField1");
        tf_axisMin.setMaximumSize(new java.awt.Dimension(62, 19));
        tf_axisMin.setMinimumSize(new java.awt.Dimension(62, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);
        tickPanel.add(tf_axisMin, gridBagConstraints);

        tf_axisMax.setFont(new java.awt.Font("Arial", 0, 11));
        tf_axisMax.setText("jTextField2");
        tf_axisMax.setMaximumSize(new java.awt.Dimension(62, 19));
        tf_axisMax.setMinimumSize(new java.awt.Dimension(62, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);
        tickPanel.add(tf_axisMax, gridBagConstraints);

        tf_axisIntervall.setFont(new java.awt.Font("Arial", 0, 11));
        tf_axisIntervall.setText("jTextField3");
        tf_axisIntervall.setEnabled(false);
        tf_axisIntervall.setMaximumSize(new java.awt.Dimension(62, 19));
        tf_axisIntervall.setMinimumSize(new java.awt.Dimension(62, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);
        tickPanel.add(tf_axisIntervall, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel9.setText("Automatic:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 0);
        tickPanel.add(jLabel9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        axesPattern.add(tickPanel, gridBagConstraints);

        cob_tickFontFamily.setLayout(new java.awt.GridBagLayout());

        cob_tickFontFamily.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), "Tick marks font", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11), new java.awt.Color(0, 102, 255)));
        jLabel17.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel17.setText("Family:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        cob_tickFontFamily.add(jLabel17, gridBagConstraints);

        tf_ticksFontSize.setFont(new java.awt.Font("Arial", 0, 11));
        tf_ticksFontSize.setText("11");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);
        cob_tickFontFamily.add(tf_ticksFontSize, gridBagConstraints);

        jLabel18.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel18.setText("Size:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 3);
        cob_tickFontFamily.add(jLabel18, gridBagConstraints);

        jLabel19.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel19.setText("Style:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 3);
        cob_tickFontFamily.add(jLabel19, gridBagConstraints);

        cob_ticksFontStyle.setFont(new java.awt.Font("Arial", 0, 11));
        cob_ticksFontStyle.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Plain", "Bold", "Italic" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);
        cob_tickFontFamily.add(cob_ticksFontStyle, gridBagConstraints);

        cob_ticksFontFamily.setFont(new java.awt.Font("Arial", 0, 11));
        cob_ticksFontFamily.setMaximumSize(new java.awt.Dimension(35, 22));
        cob_ticksFontFamily.setMinimumSize(new java.awt.Dimension(35, 22));
        cob_ticksFontFamily.setPreferredSize(new java.awt.Dimension(35, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 3);
        cob_tickFontFamily.add(cob_ticksFontFamily, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        axesPattern.add(cob_tickFontFamily, gridBagConstraints);

        cob_tickFontFamily1.setLayout(new java.awt.GridBagLayout());

        cob_tickFontFamily1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), "Legend Font", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11), new java.awt.Color(0, 102, 255)));
        jLabel20.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel20.setText("Family:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        cob_tickFontFamily1.add(jLabel20, gridBagConstraints);

        tf_legendFontSize.setFont(new java.awt.Font("Arial", 0, 11));
        tf_legendFontSize.setText("11");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);
        cob_tickFontFamily1.add(tf_legendFontSize, gridBagConstraints);

        jLabel21.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel21.setText("Size:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 3);
        cob_tickFontFamily1.add(jLabel21, gridBagConstraints);

        jLabel22.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel22.setText("Style:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 3);
        cob_tickFontFamily1.add(jLabel22, gridBagConstraints);

        cob_legendFontStyle.setFont(new java.awt.Font("Arial", 0, 11));
        cob_legendFontStyle.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Plain", "Bold", "Italic" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);
        cob_tickFontFamily1.add(cob_legendFontStyle, gridBagConstraints);

        cob_legendFontFamily.setFont(new java.awt.Font("Arial", 0, 11));
        cob_legendFontFamily.setMaximumSize(new java.awt.Dimension(35, 22));
        cob_legendFontFamily.setMinimumSize(new java.awt.Dimension(35, 22));
        cob_legendFontFamily.setPreferredSize(new java.awt.Dimension(35, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 3);
        cob_tickFontFamily1.add(cob_legendFontFamily, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        axesPattern.add(cob_tickFontFamily1, gridBagConstraints);

        labelPanel2.setLayout(new java.awt.GridBagLayout());

        labelPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), "Diagram Title", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11), new java.awt.Color(0, 102, 255)));
        tf_diagramTitle.setFont(new java.awt.Font("Arial", 0, 11));
        tf_diagramTitle.setText("Title");
        tf_diagramTitle.setMaximumSize(new java.awt.Dimension(62, 19));
        tf_diagramTitle.setMinimumSize(new java.awt.Dimension(62, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 3);
        labelPanel2.add(tf_diagramTitle, gridBagConstraints);

        jLabel14.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel14.setText("Title:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 0);
        labelPanel2.add(jLabel14, gridBagConstraints);

        cb_diagramTitle.setText("show title");
        cb_diagramTitle.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cb_diagramTitle.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        labelPanel2.add(cb_diagramTitle, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        axesPattern.add(labelPanel2, gridBagConstraints);

        jTabbedPane1.addTab("Text & Titles", axesPattern);

        subplotPanel.setLayout(new java.awt.GridBagLayout());

        cob_subplotID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cob_subplotIDActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        subplotPanel.add(cob_subplotID, gridBagConstraints);

        jLabel3.setText("Subplot ID:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);
        subplotPanel.add(jLabel3, gridBagConstraints);

        tf_weight.setText("jTextField1");
        tf_weight.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        subplotPanel.add(tf_weight, gridBagConstraints);

        jLabel5.setText("Weight:");
        jLabel5.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);
        subplotPanel.add(jLabel5, gridBagConstraints);

        movePlotUp.setText("Move up");
        movePlotUp.setActionCommand("MoveUp");
        movePlotUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movePlotUpActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        subplotPanel.add(movePlotUp, gridBagConstraints);

        movePlotDown.setText("Move down");
        movePlotDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movePlotDownActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        subplotPanel.add(movePlotDown, gridBagConstraints);

        jLabel6.setText("Gap size:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);
        subplotPanel.add(jLabel6, gridBagConstraints);

        tf_gapSize.setText("jTextField2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        subplotPanel.add(tf_gapSize, gridBagConstraints);

        jTabbedPane1.addTab("Subplots", subplotPanel);

        mainPanel.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(309, Short.MAX_VALUE)
                .add(setButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cancelButton)
                .addContainerGap())
            .add(mainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
        );

        layout.linkSize(new java.awt.Component[] {cancelButton, setButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(mainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cancelButton)
                    .add(setButton))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cob_subplotIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cob_subplotIDActionPerformed
        this.movePlotDown.setEnabled(true);
        this.movePlotUp.setEnabled(true);
        int selection = this.cob_subplotID.getSelectedIndex();
        this.tf_weight.setText(""+((XYPlot)this.cdp.getSubplots().get(selection)).getWeight());
        if(selection == 0){
            this.movePlotDown.setEnabled(false);
        }
        else if(selection == cdp.getSubplots().size()-1){
            this.movePlotUp.setEnabled(false);
        }
        
    }//GEN-LAST:event_cob_subplotIDActionPerformed

    private void movePlotDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movePlotDownActionPerformed
        int selection = this.cob_subplotID.getSelectedIndex();
        int nSP = cdp.getSubplots().size();
        XYPlot[] plots = new XYPlot[nSP];
        java.util.Vector plotList = new java.util.Vector();
        for(int i = 0; i < nSP; i++){
            plots[i] = (XYPlot)cdp.getSubplots().get(i);
        }
        for(int i = 0; i < nSP; i++){
            cdp.remove(plots[i]);
            plotList.add(i, i);
        }
        //move element in list
        int element = ((Integer)plotList.remove(selection)).intValue();
        plotList.add(selection-1, element);
        for(int i = 0; i < nSP; i++){
            cdp.add(plots[((Integer)plotList.get(i)).intValue()]);
        }
    }//GEN-LAST:event_movePlotDownActionPerformed

    private void movePlotUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movePlotUpActionPerformed
        int selection = this.cob_subplotID.getSelectedIndex();
        int nSP = cdp.getSubplots().size();
        XYPlot[] plots = new XYPlot[nSP];
        java.util.Vector plotList = new java.util.Vector();
        for(int i = 0; i < nSP; i++){
            plots[i] = (XYPlot)cdp.getSubplots().get(i);
        }
        for(int i = 0; i < nSP; i++){
            cdp.remove(plots[i]);
            plotList.add(i, i);
        }
        //move element in list
        int element = ((Integer)plotList.remove(selection)).intValue();
        plotList.add(selection+1, element);
        for(int i = 0; i < nSP; i++){
            cdp.add(plots[((Integer)plotList.get(i)).intValue()]);
        }
    }//GEN-LAST:event_movePlotUpActionPerformed

    private void legendBgColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_legendBgColorMouseClicked
        this.legendBgColor.setBackground(javax.swing.JColorChooser.showDialog(this, "Line color", this.chartBgColor.getBackground()));
    }//GEN-LAST:event_legendBgColorMouseClicked

    private void chartBgColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chartBgColorMouseClicked
        this.chartBgColor.setBackground(javax.swing.JColorChooser.showDialog(this, "Line color", this.chartBgColor.getBackground()));
    }//GEN-LAST:event_chartBgColorMouseClicked
    
    private void setButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setButtonActionPerformed
        this.chartPanel.setBackground(this.bgColorPanel.getBackground());
        this.chartPanel.getChart().setBackgroundPaint(this.chartBgColor.getBackground());
        this.chartPanel.getChart().getLegend().setBackgroundPaint(this.legendBgColor.getBackground());
        if(this.cb_diagramTitle.isSelected()){
            this.chartPanel.getChart().setTitle(this.tf_diagramTitle.getText());
        }
        //this.chartPanel.getChart().getTitle().setText(this.tf_diagramTitle.getText());
        this.chartPanel.getChart().fireChartChanged();
               
        ((XYPlot)this.chartPanel.getChart().getPlot()).getDomainAxis().setLabel(this.axisTitle.getText());
        ((XYPlot)this.chartPanel.getChart().getPlot()).getDomainAxis().setLabelFont(new java.awt.Font((String)this.cob_labelFontFamily.getSelectedItem(), this.cob_labelFontStyle.getSelectedIndex(), Integer.parseInt(this.tf_labelFontSize.getText())));
        ((XYPlot)this.chartPanel.getChart().getPlot()).getDomainAxis().setTickLabelFont(new java.awt.Font((String)this.cob_ticksFontFamily.getSelectedItem(), this.cob_ticksFontStyle.getSelectedIndex(), Integer.parseInt(this.tf_ticksFontSize.getText())));
        
        this.chartPanel.getChart().getLegend().setItemFont(new java.awt.Font((String)this.cob_legendFontFamily.getSelectedItem(), this.cob_legendFontStyle.getSelectedIndex(), Integer.parseInt(this.tf_legendFontSize.getText())));
        
        double upperRange = Double.parseDouble(this.tf_axisMax.getText());
        double lowerRange = Double.parseDouble(this.tf_axisMin.getText());
        
        ((XYPlot)this.chartPanel.getChart().getPlot()).getDomainAxis().setAutoRange(true);
        
        double autoUpperRange = ((XYPlot)this.chartPanel.getChart().getPlot()).getDomainAxis().getUpperBound();
        double autoLowerRange = ((XYPlot)this.chartPanel.getChart().getPlot()).getDomainAxis().getLowerBound();
        
        if(!this.cb_axisMin.isSelected() && !this.cb_axisMax.isSelected()){
            ((XYPlot)this.chartPanel.getChart().getPlot()).getDomainAxis().setRange(lowerRange, upperRange);
        }
        if(this.cb_axisMin.isSelected() && !this.cb_axisMax.isSelected()){
            ((XYPlot)this.chartPanel.getChart().getPlot()).getDomainAxis().setAutoRange(false);
            ((XYPlot)this.chartPanel.getChart().getPlot()).getDomainAxis().setRange(autoLowerRange, upperRange);
        }
        if(!this.cb_axisMin.isSelected() && this.cb_axisMax.isSelected()){
            ((XYPlot)this.chartPanel.getChart().getPlot()).getDomainAxis().setAutoRange(false);
            ((XYPlot)this.chartPanel.getChart().getPlot()).getDomainAxis().setRange(lowerRange, autoUpperRange);
        }
        if(this.cb_axisMin.isSelected() && this.cb_axisMax.isSelected()){
            ((XYPlot)this.chartPanel.getChart().getPlot()).getDomainAxis().setAutoRange(true);
        }
        
        if(subplots){
            this.cdp.setGap(Double.parseDouble(this.tf_gapSize.getText()));
            
            /*
            int weight = (int)Double.parseDouble(this.tf_weight.getText());
            //recalculate the weight for all plots
            int sumWeights = 0;
            int nplots = cdp.getSubplots().size();
            int[] wArr = new int[nplots];
            for(int i = 0; i < nplots; i++){
                wArr[i] = ((XYPlot)this.cdp.getSubplots().get(this.cob_subplotID.getSelectedIndex())).getWeight();
                sumWeights += wArr[i];
            }
            
            int total = nplots * sumWeights;
            for(int i = 0; i < nplots; i++)
                ((XYPlot)this.cdp.getSubplots().get(i)).setWeight(wArr[i] * nplots);
             */
        }
        
    }//GEN-LAST:event_setButtonActionPerformed
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog
    
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel axesPattern;
    private javax.swing.JTextField axisTitle;
    private javax.swing.JPanel bgColorPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox cb_axisIntervall;
    private javax.swing.JCheckBox cb_axisMax;
    private javax.swing.JCheckBox cb_axisMin;
    private javax.swing.JCheckBox cb_diagramTitle;
    public javax.swing.JPanel chartBgColor;
    private javax.swing.JComboBox cob_labelFontFamily;
    private javax.swing.JComboBox cob_labelFontStyle;
    private javax.swing.JComboBox cob_legendFontFamily;
    private javax.swing.JComboBox cob_legendFontStyle;
    private javax.swing.JComboBox cob_subplotID;
    private javax.swing.JPanel cob_tickFontFamily;
    private javax.swing.JPanel cob_tickFontFamily1;
    private javax.swing.JComboBox cob_ticksFontFamily;
    private javax.swing.JComboBox cob_ticksFontStyle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel labelFontPanel;
    private javax.swing.JPanel labelPanel;
    private javax.swing.JPanel labelPanel2;
    public javax.swing.JPanel legendBgColor;
    private javax.swing.JPanel lineSeriesPattern;
    private javax.swing.JTextField lineType;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton movePlotDown;
    private javax.swing.JButton movePlotUp;
    private javax.swing.JButton setButton;
    private javax.swing.JPanel subplotPanel;
    private javax.swing.JTextField tf_axisIntervall;
    private javax.swing.JTextField tf_axisMax;
    private javax.swing.JTextField tf_axisMin;
    private javax.swing.JTextField tf_diagramTitle;
    private javax.swing.JTextField tf_gapSize;
    private javax.swing.JTextField tf_labelFontSize;
    private javax.swing.JTextField tf_legendFontSize;
    private javax.swing.JTextField tf_ticksFontSize;
    private javax.swing.JTextField tf_weight;
    private javax.swing.JPanel tickPanel;
    // End of variables declaration//GEN-END:variables
    
    private int returnStatus = RET_CANCEL;
}
