/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BaseDataPanel.java
 *
 * Created on 31.08.2009, 11:22:43
 */
package reg.wizard.tlug.panels;

import jams.data.JAMSTimeInterval;
import jams.JAMSFileFilter;
import jams.gui.input.InputComponent;
import jams.gui.input.InputComponentFactory;
import jams.gui.input.TimeintervalInput;
import jams.gui.input.ValueChangeListener;
import jams.gui.tools.GUIHelper;
import jams.tools.StringTools;
import java.awt.GridBagLayout;
import java.io.File;
import java.util.Map;
import java.util.Vector;
import javax.swing.JFileChooser;
import org.h2.util.StringUtils;
import org.netbeans.spi.wizard.WizardController;

/**
 *
 * @author hbusch
 */
public class BaseDataPanel extends javax.swing.JPanel {

    private final WizardController controller;
    private final Map wizardData;

    private BaseDataPanel thisPanel;
    public static final String KEY_SHAPE_FILENAME = "shapeFileName";
    public static final String KEY_POINT_LAT = "pointLat";
    public static final String KEY_POINT_LON = "pointLon";
    public static final String KEY_POINT_HEIGHT = "pointHeight";
    public static final String KEY_GRID_FROM_LAT = "gridFromLat";
    public static final String KEY_GRID_FROM_LON = "gridFromLon";
    public static final String KEY_GRID_TO_LAT = "gridToLat";
    public static final String KEY_GRID_TO_LON = "gridToLon";
    public static final String KEY_GRID_DISTANCE = "gridDistance";
    public static final String KEY_REGIONALIZATION = "regionalizationData";
    public static final String KEY_REGDATA_KEYS = "regDataKeys";
    public static final String KEY_REGDATA_DISPS = "regDataDisps";
    private Vector<String> regData_Display = new Vector<String>();
    private Vector<String> regData_Key = new Vector<String>();
    public static final String KEY_INTERVAL = "interval";
    // all field contents
    private String r_shapeFileName = null;
    private String r_region = null;
    private String r_interval = null;
    private String r_pLat = null;
    private String r_pLon = null;
    private String r_pHeight = null;
    private String r_gFLat = null;
    private String r_gFLon = null;
    private String r_gTLat = null;
    private String r_gTLon = null;
    private String r_gDist = null;

    /** Creates new form  */
    public BaseDataPanel(WizardController controller, Map wizardData) {

        this.controller = controller;
        this.wizardData = wizardData;
        thisPanel = this;

        initComponents();
        setupComponents();

        initFromWizardData();
        checkProblems();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {

        jFileLabel = new javax.swing.JLabel();
        jFileName = new javax.swing.JTextField();

        jFileButton = new javax.swing.JButton();
        jRegLabel = new javax.swing.JLabel();
        jRegCombo = new javax.swing.JComboBox();
        jIntervalLabel = new javax.swing.JLabel();

        jPointLabel = new javax.swing.JLabel();
        jGridLabel = new javax.swing.JLabel();
        jGridFromLabel = new javax.swing.JLabel();
        jGridToLabel = new javax.swing.JLabel();
        jGridDistLabel = new javax.swing.JLabel();
        jLatLabel = new javax.swing.JLabel();
        jLatLabel2 = new javax.swing.JLabel();
        jLatLabel3 = new javax.swing.JLabel();
        jLonLabel = new javax.swing.JLabel();
        jLonLabel2 = new javax.swing.JLabel();
        jLonLabel3 = new javax.swing.JLabel();
        jHeightLabel = new javax.swing.JLabel();

        jPLat = new javax.swing.JTextField();
        jPLon = new javax.swing.JTextField();
        jPHeight = new javax.swing.JTextField();
        jGFLat = new javax.swing.JTextField();
        jGFLon = new javax.swing.JTextField();
        jGTLat = new javax.swing.JTextField();
        jGTLon = new javax.swing.JTextField();
        jGDist = new javax.swing.JTextField();


        jIntervall = InputComponentFactory.createInputComponent(JAMSTimeInterval.class, false);

        jIntervall.addValueChangeListener(new ValueChangeListener() {

            @Override
            public void valueChanged() {
                try {
                    checkProblems();
                } catch (Exception e) {
                    // do nothing
                }
            }
        });


        jFileLabel.setText("Shape-File");

        jFileName.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                jFileNameFocusLost(evt);
            }
        });

        jFileButton.setText("Auswahl");
        jFileButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileButtonActionPerformed(evt);
            }
        });

        jPLat.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                checkProblems();
            }
        });
        jPLon.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                checkProblems();
            }
        });
        jPHeight.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                checkProblems();
            }
        });
        jGFLat.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                checkProblems();
            }
        });
        jGFLon.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                checkProblems();
            }
        });
        jGTLat.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                checkProblems();
            }
        });
        jGTLon.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                checkProblems();
            }
        });
        jGDist.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                checkProblems();
            }
        });

        jRegLabel.setText("Regionalisierung von");

        // will be done later in initFromWizardData
        //jRegCombo.setModel(new javax.swing.DefaultComboBoxModel(regData_Display));
        jRegCombo.addFocusListener(new java.awt.event.FocusListener() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                jRegComboFocusLost(evt);
            }

            public void focusGained(java.awt.event.FocusEvent evt) {
            }
        });

        jIntervalLabel.setText("Zeitintervall");

        jPointLabel.setText("Punkt");
        jGridLabel.setText("Rechteck");
        jGridFromLabel.setText("Obere linke Ecke");
        jGridToLabel.setText("Untere rechte Ecke");
        jGridDistLabel.setText("Schrittweite (m)");
        jLatLabel.setText("Rechtswert (Lat)");
        jLatLabel2.setText("Rechtswert (Lat)");
        jLatLabel3.setText("Rechtswert (Lat)");
        jLonLabel.setText("Hochwert (Lon)");
        jLonLabel2.setText("Hochwert (Lon)");
        jLonLabel3.setText("Hochwert (Lon)");
        jHeightLabel.setText("HÃ¶he");

        GridBagLayout layout = new GridBagLayout();
        this.setLayout(layout);

        //Component addGBComponent(Container cont, GridBagLayout gbl, Component c,
        //        int x, int y, int width, int height,
        //        double weightx, double weighty) {

        int row = 1;
        GUIHelper.addGBComponent(this, layout, jFileLabel, 1, row, 1, 1, 0, 0);
        GUIHelper.addGBComponent(this, layout, jFileName, 2, row, 2, 1, 0, 0);
        GUIHelper.addGBComponent(this, layout, jFileButton, 4, row, 1, 1, 0, 0);

        row++;
        GUIHelper.addGBComponent(this, layout, jPointLabel, 1, row, 1, 1, 0, 0);
        GUIHelper.addGBComponent(this, layout, jLatLabel, 2, row, 1, 1, 0, 0);
        GUIHelper.addGBComponent(this, layout, jPLat, 3, row, 1, 1, 0, 0);
        row++;
        GUIHelper.addGBComponent(this, layout, jLonLabel, 2, row, 1, 1, 0, 0);
        GUIHelper.addGBComponent(this, layout, jPLon, 3, row, 1, 1, 0, 0);
        row++;
        GUIHelper.addGBComponent(this, layout, jHeightLabel, 2, row, 1, 1, 0, 0);
        GUIHelper.addGBComponent(this, layout, jPHeight, 3, row, 1, 1, 0, 0);

        row++;
        GUIHelper.addGBComponent(this, layout, jGridLabel, 1, row, 1, 1, 0, 0);
        GUIHelper.addGBComponent(this, layout, jGridFromLabel, 2, row, 1, 1, 0, 0);
        GUIHelper.addGBComponent(this, layout, jLatLabel2, 3, row, 1, 1, 0, 0);
        GUIHelper.addGBComponent(this, layout, jGFLat, 4, row, 1, 1, 0, 0);
        row++;
        GUIHelper.addGBComponent(this, layout, jLonLabel2, 3, row, 1, 1, 0, 0);
        GUIHelper.addGBComponent(this, layout, jGFLon, 4, row, 1, 1, 0, 0);
        row++;
        GUIHelper.addGBComponent(this, layout, jGridToLabel, 2, row, 1, 1, 0, 0);
        GUIHelper.addGBComponent(this, layout, jLatLabel3, 3, row, 1, 1, 0, 0);
        GUIHelper.addGBComponent(this, layout, jGTLat, 4, row, 1, 1, 0, 0);
        row++;
        GUIHelper.addGBComponent(this, layout, jLonLabel3, 3, row, 1, 1, 0, 0);
        GUIHelper.addGBComponent(this, layout, jGTLon, 4, row, 1, 1, 0, 0);
        row++;
        GUIHelper.addGBComponent(this, layout, jGridDistLabel, 2, row, 1, 1, 0, 0);
        GUIHelper.addGBComponent(this, layout, jGDist, 3, row, 1, 1, 0, 0);

        row++;
        row++;
        GUIHelper.addGBComponent(this, layout, jRegLabel, 1, row, 1, 1, 0, 0);
        GUIHelper.addGBComponent(this, layout, jRegCombo, 2, row, 2, 1, 0, 0);

        row++;
        GUIHelper.addGBComponent(this, layout, jIntervalLabel, 1, row, 1, 1, 0, 0);
        GUIHelper.addGBComponent(this, layout, jIntervall.getComponent(), 2, row, 3, 3, 0, 0);


    }

    private void jRegComboFocusLost(java.awt.event.FocusEvent evt) {
        int selIndex = jRegCombo.getSelectedIndex();
        //System.out.println("jRegCombo. " + jRegCombo.getSelectedItem() + ", selIndex=" + selIndex + ", -> " + regData_Key.elementAt(selIndex));
        r_region = regData_Key.elementAt(selIndex);
        checkProblems();

    }

    private void jFileButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String fileName = null;
        int returnVal = -1;
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(JAMSFileFilter.getShapeFilter());
        try {
            returnVal = chooser.showOpenDialog(thisPanel);
            File file = chooser.getSelectedFile();
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                fileName = file.getPath();
                jFileName.setText(fileName);
            }

        } catch (Exception fnfexc) {
            fileName = null;
        }
        r_shapeFileName = fileName;
        checkProblems();
    }

    private void jFileNameFocusLost(java.awt.event.FocusEvent evt) {
        r_shapeFileName = jFileName.getText();
        checkProblems();
    }

    private void setupComponents() {


        // defaults
        r_interval = "1990-01-01 7:30 2000-12-31 7:30 6 1";

    }

    private void checkProblems() {

        controller.setProblem(null);
        if (StringTools.isEmptyString(r_shapeFileName)) {
            r_shapeFileName = "";
        }
        r_pLat = jPLat.getText();
        r_pLon = jPLon.getText();
        r_pHeight = jPHeight.getText();
        r_gFLat = jGFLat.getText();
        r_gFLon = jGFLon.getText();
        r_gTLat = jGTLat.getText();
        r_gTLon = jGTLon.getText();
        r_gDist = jGDist.getText();

        if (StringTools.isEmptyString(r_shapeFileName) &&
                StringTools.isEmptyString(r_pLat) &&
                StringTools.isEmptyString(r_gFLat)) {
            controller.setProblem("Bitte Shape-File oder Punkt oder Rechteck angeben.");
        } else {
            if (!StringTools.isEmptyString(r_pLat) &&
                    (StringTools.isEmptyString(r_pLon) ||
                    StringTools.isEmptyString(r_pHeight))) {
                controller.setProblem("Bitte alle Parameter fÃ¼r Punkt angeben.");
            } else {

                if (!StringTools.isEmptyString(r_gFLat) &&
                        (StringTools.isEmptyString(r_gFLon) ||
                        StringTools.isEmptyString(r_gTLat) ||
                        StringTools.isEmptyString(r_gTLon) ||
                        StringTools.isEmptyString(r_gDist))) {
                    controller.setProblem("Bitte alle Parameter fÃ¼r Rechteck angeben.");
                } else {


                    wizardData.put(KEY_SHAPE_FILENAME, r_shapeFileName);
                    wizardData.put(KEY_POINT_LAT, r_pLat);
                    wizardData.put(KEY_POINT_LON, r_pLon);
                    wizardData.put(KEY_POINT_HEIGHT, r_pHeight);
                    wizardData.put(KEY_GRID_FROM_LAT, r_gFLat);
                    wizardData.put(KEY_GRID_FROM_LON, r_gFLon);
                    wizardData.put(KEY_GRID_TO_LAT, r_gTLat);
                    wizardData.put(KEY_GRID_TO_LON, r_gTLon);
                    wizardData.put(KEY_GRID_DISTANCE, r_gDist);

                    //wizardData.put(KEY_DATA_ORIGIN, r_dataOrigin);
                    if (StringUtils.isNullOrEmpty(r_region)) {
                        controller.setProblem("Bitte Regionalisierung festlegen.");
                    } else {
                        wizardData.put(KEY_REGIONALIZATION, r_region);

                        int errorCode = jIntervall.getErrorCode();
                        if (errorCode > 0) {
                            controller.setProblem("Bitte Zeitintervall auswÃ¤hlen.");

                        } else {
                            r_interval = jIntervall.getValue();
                            //System.out.println("r_interval:" + r_interval);
                            wizardData.put(KEY_INTERVAL, r_interval);

                            // numeric check
                            if (!StringTools.isEmptyString(r_pLat)) {
                                if (!StringTools.isDouble(r_pLat))
                                    controller.setProblem(jPLat.getText() + ". Keine numerische Eingabe.");
                                if (!StringTools.isDouble(r_pLon))
                                    controller.setProblem(jPLon.getText() + ". Keine numerische Eingabe.");
                                if (!StringTools.isDouble(r_pHeight))
                                    controller.setProblem(jPHeight.getText() + ". Keine numerische Eingabe.");
                            }

                            if (!StringTools.isEmptyString(r_gFLat)) {
                                if (!StringTools.isDouble(r_gFLat))
                                    controller.setProblem(jGFLat.getText() + ". Keine numerische Eingabe.");
                                if (!StringTools.isDouble(r_gFLon))
                                    controller.setProblem(jGFLon.getText() + ". Keine numerische Eingabe.");
                                if (!StringTools.isDouble(r_gTLat))
                                    controller.setProblem(jGTLat.getText() + ". Keine numerische Eingabe.");
                                if (!StringTools.isDouble(r_gTLon))
                                    controller.setProblem(jGTLon.getText() + ". Keine numerische Eingabe.");
                                if (!StringTools.isDouble(r_gDist))
                                    controller.setProblem(jGDist.getText() + ". Keine numerische Eingabe.");
                                if (Double.parseDouble(r_gTLat) > Double.parseDouble(r_gFLat))
                                    controller.setProblem(jGTLat.getText() + ": Wert ist zu gross.");
                                if (Double.parseDouble(r_gTLon) < Double.parseDouble(r_gFLon))
                                    controller.setProblem(jGTLon.getText() + ": Wert ist zu klein.");
                            }
                        }
                    }
                }
            }
        }
        return;
    }

    /**
     * init display data from wizard data
     */
    private void initFromWizardData() {

        String shapeFileName = (String) wizardData.get(KEY_SHAPE_FILENAME);
        if (!StringUtils.isNullOrEmpty(shapeFileName)) {
            r_shapeFileName = shapeFileName;
            jFileName.setText(r_shapeFileName);
        }

        String pLat = (String) wizardData.get(KEY_POINT_LAT);
        String pLon = (String) wizardData.get(KEY_POINT_LON);
        String pHeight = (String) wizardData.get(KEY_POINT_HEIGHT);
        if (!StringUtils.isNullOrEmpty(pLat)) {
            r_pLat = pLat;
            jPLat.setText(r_pLat);
        }
        if (!StringUtils.isNullOrEmpty(pLon)) {
            r_pLon = pLon;
            jPLon.setText(r_pLon);
        }
        if (!StringUtils.isNullOrEmpty(pHeight)) {
            r_pHeight = pHeight;
            jPHeight.setText(r_pHeight);
        }

        String gFLat = (String) wizardData.get(KEY_GRID_FROM_LAT);
        String gFLon = (String) wizardData.get(KEY_GRID_FROM_LON);
        String gTLat = (String) wizardData.get(KEY_GRID_TO_LAT);
        String gTLon = (String) wizardData.get(KEY_GRID_TO_LON);
        String gDist = (String) wizardData.get(KEY_GRID_DISTANCE);
        if (!StringUtils.isNullOrEmpty(gFLat)) {
            r_gFLat = gFLat;
            jGFLat.setText(r_gFLat);
        }
        if (!StringUtils.isNullOrEmpty(gFLon)) {
            r_gFLon = gFLon;
            jGFLon.setText(r_gFLon);
        }
        if (!StringUtils.isNullOrEmpty(gTLat)) {
            r_gTLat = gTLat;
            jGTLat.setText(r_gTLat);
        }
        if (!StringUtils.isNullOrEmpty(gTLon)) {
            r_gTLon = gTLon;
            jGTLon.setText(r_gTLon);
        }
        if (!StringUtils.isNullOrEmpty(gDist)) {
            r_gDist = gDist;
            jGDist.setText(r_gDist);
        }

        regData_Key = (Vector<String>) wizardData.get(KEY_REGDATA_KEYS);
        regData_Display = (Vector<String>) wizardData.get(KEY_REGDATA_DISPS);
        jRegCombo.setModel(new javax.swing.DefaultComboBoxModel(regData_Display));
        String regionalizationData = (String) wizardData.get(KEY_REGIONALIZATION);
        if (!StringUtils.isNullOrEmpty(regionalizationData)) {
            r_region = regionalizationData;
        } else {
            r_region = regData_Key.elementAt(0);
        }
        if (!StringUtils.isNullOrEmpty(r_region)) {
            int theIndex = regData_Key.indexOf(r_region);
            if (theIndex < 0) {
                System.out.println("Wert " + r_region + " nicht in regData_Key gefunden. System falsch initialisiert.");
            } else {
                jRegCombo.setSelectedIndex(theIndex);
            }
        }

        String interval = (String) wizardData.get(KEY_INTERVAL);
        if (!StringUtils.isNullOrEmpty(interval)) {
            r_interval = interval;
        }
        if (!StringUtils.isNullOrEmpty(r_interval)) {
            ((TimeintervalInput) jIntervall).setValue(r_interval);
        }
    }
    // Variables declaration
    //private javax.swing.ButtonGroup buttonGroup1;
    //private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jFileButton;
    private javax.swing.JLabel jFileLabel;
    private javax.swing.JTextField jFileName;
    private javax.swing.JLabel jPointLabel;
    private javax.swing.JLabel jGridLabel;
    private javax.swing.JLabel jGridFromLabel;
    private javax.swing.JLabel jGridToLabel;
    private javax.swing.JLabel jGridDistLabel;
    private javax.swing.JLabel jLatLabel;
    private javax.swing.JLabel jLatLabel2;
    private javax.swing.JLabel jLatLabel3;
    private javax.swing.JLabel jLonLabel;
    private javax.swing.JLabel jLonLabel2;
    private javax.swing.JLabel jLonLabel3;
    private javax.swing.JLabel jHeightLabel;
    private javax.swing.JTextField jPLat;
    private javax.swing.JTextField jPLon;
    private javax.swing.JTextField jPHeight;
    private javax.swing.JTextField jGFLat;
    private javax.swing.JTextField jGFLon;
    private javax.swing.JTextField jGTLat;
    private javax.swing.JTextField jGTLon;
    private javax.swing.JTextField jGDist;
    private InputComponent jIntervall;
    private javax.swing.JLabel jIntervalLabel;
    private javax.swing.JComboBox jRegCombo;
    private javax.swing.JLabel jRegLabel;
    // End of variables declaration
}
