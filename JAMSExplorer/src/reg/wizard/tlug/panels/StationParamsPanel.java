/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StationParamsPanel.java
 *
 * Created on 28.08.2009, 15:07:22
 */

package reg.wizard.tlug.panels;

import jams.JAMSFileFilter;
import jams.tools.StringTools;
import java.io.File;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JRadioButton;
import org.h2.util.StringUtils;
import org.netbeans.spi.wizard.WizardController;

/**
 *
 * @author hbusch
 */
public class StationParamsPanel extends javax.swing.JPanel {

    private final WizardController controller;
    private final Map wizardData;

    public static final String KEY_SHAPE_FILENAME = "shapeFileName";
    public static final String KEY_COMPUTATION = "computation";
    public static final String VALUE_EVAPOR = "evaporation";
    public static final String VALUE_RADIATION = "radiation";
    public static final String VALUE_AHUM = "ahum";
    public static final String VALUE_PRECIPCORR = "precipCorrection";
    public static final String VALUE_ALL = "all";

    // all field contents
    private String r_shapeFileName = null;
    private String r_computation = null;

    private StationParamsPanel thisPanel;

    /** Creates new form  */
    public StationParamsPanel(WizardController controller, Map wizardData) {

        this.controller = controller;
        this.wizardData = wizardData;

        initComponents();
        thisPanel = this;

        // group buttons
        buttonGroup1.add(jRadioEvapor);
        buttonGroup1.add(jRadioRadiation);
        buttonGroup1.add(jRadioPrecipCorr);
        buttonGroup1.add(jRadioHumidity);
        // buttonGroup1.add(jRadioAlles); // not wishes anymore

        jRadioEvapor.putClientProperty(KEY_COMPUTATION, VALUE_EVAPOR);
        jRadioRadiation.putClientProperty(KEY_COMPUTATION, VALUE_RADIATION);
        jRadioPrecipCorr.putClientProperty(KEY_COMPUTATION, VALUE_PRECIPCORR);
        jRadioHumidity.putClientProperty(KEY_COMPUTATION, VALUE_AHUM);
        //jRadioAlles.putClientProperty(KEY_COMPUTATION, VALUE_ALL);

        initFromWizardData();
        checkProblems();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jRadioEvapor = new javax.swing.JRadioButton();
        jRadioRadiation = new javax.swing.JRadioButton();
        jRadioHumidity = new javax.swing.JRadioButton();
        jRadioPrecipCorr = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jFileName = new javax.swing.JTextField();
        jFileButton = new javax.swing.JButton();

        jRadioEvapor.setText("Verdunstung");
        jRadioEvapor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioEvaporActionPerformed(evt);
            }
        });

        jRadioRadiation.setText("Strahlungsberechnung");
        jRadioRadiation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioRadiationActionPerformed(evt);
            }
        });

        jRadioHumidity.setText("absolute Luftfeuchte");
        jRadioHumidity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioHumidityActionPerformed(evt);
            }
        });

        jRadioPrecipCorr.setText("Niederschlagskorrektur");
        jRadioPrecipCorr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioPrecipCorrActionPerformed(evt);
            }
        });

        jLabel1.setText("Shape-File");

        jFileName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFileNameFocusLost(evt);
            }
        });

        jFileButton.setText("Auswahl");
        jFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jFileButton))
                    .addComponent(jRadioHumidity)
                    .addComponent(jRadioRadiation)
                    .addComponent(jRadioEvapor)
                    .addComponent(jRadioPrecipCorr))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioHumidity)
                .addGap(18, 18, 18)
                .addComponent(jRadioRadiation)
                .addGap(18, 18, 18)
                .addComponent(jRadioEvapor)
                .addGap(18, 18, 18)
                .addComponent(jRadioPrecipCorr)
                .addContainerGap(96, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioRadiationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioRadiationActionPerformed
        computationSelected(evt);
    }//GEN-LAST:event_jRadioRadiationActionPerformed

    private void jRadioEvaporActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioEvaporActionPerformed
        computationSelected(evt);
    }//GEN-LAST:event_jRadioEvaporActionPerformed

    private void jRadioHumidityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioHumidityActionPerformed
        computationSelected(evt);
    }//GEN-LAST:event_jRadioHumidityActionPerformed

    private void jRadioPrecipCorrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioPrecipCorrActionPerformed
        computationSelected(evt);
    }//GEN-LAST:event_jRadioPrecipCorrActionPerformed

    private void jFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileButtonActionPerformed
        // TODO add your handling code here:
        String fileName = null;
        int returnVal = -1;
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(JAMSFileFilter.getShapeFilter());
        try {
            returnVal = chooser.showOpenDialog(thisPanel);
            File file = chooser.getSelectedFile();
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                fileName = file.getPath();
                jFileName.setText(fileName);
            }

        } catch (Exception fnfexc) {
            fileName = null;
        }
        r_shapeFileName = fileName;
        checkProblems();

    }//GEN-LAST:event_jFileButtonActionPerformed

    private void jFileNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFileNameFocusLost
        // TODO add your handling code here:
        r_shapeFileName = jFileName.getText();
        checkProblems();
    }//GEN-LAST:event_jFileNameFocusLost

    private void computationSelected(java.awt.event.ActionEvent evt) {

        Object val = ((JRadioButton) evt.getSource()).getClientProperty(KEY_COMPUTATION);
        r_computation = (String) val;
        checkProblems();
    }


    /**
     * init display data from wizard data
     */
    private void initFromWizardData() {

        String shapeFileName = (String) wizardData.get(KEY_SHAPE_FILENAME);
        if (!StringUtils.isNullOrEmpty(shapeFileName)) {
            r_shapeFileName = shapeFileName;
            jFileName.setText(r_shapeFileName);
        }

        String computation = (String) wizardData.get(KEY_COMPUTATION);
        if (!StringUtils.isNullOrEmpty(computation)) {
            r_computation = computation;
            if (computation.equals(VALUE_EVAPOR))
                jRadioEvapor.setSelected(true);
            if (computation.equals(VALUE_RADIATION))
                jRadioRadiation.setSelected(true);
            if (computation.equals(VALUE_AHUM))
                jRadioHumidity.setSelected(true);
            if (computation.equals(VALUE_PRECIPCORR))
                jRadioPrecipCorr.setSelected(true);
//            if (computation.equals(VALUE_ALL))
//                jRadioAlles.setSelected(true);
        }
    }

    private void checkProblems() {

        controller.setProblem(null);
        if (StringTools.isEmptyString(r_shapeFileName))
            r_shapeFileName = "";
        wizardData.put(KEY_SHAPE_FILENAME, r_shapeFileName);
        if (StringUtils.isNullOrEmpty(r_computation)) {
            controller.setProblem("Bitte Berechnungsart auswählen.");
        } else {
            wizardData.put(KEY_COMPUTATION, r_computation);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jFileButton;
    private javax.swing.JTextField jFileName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton jRadioEvapor;
    private javax.swing.JRadioButton jRadioHumidity;
    private javax.swing.JRadioButton jRadioPrecipCorr;
    private javax.swing.JRadioButton jRadioRadiation;
    // End of variables declaration//GEN-END:variables

}
